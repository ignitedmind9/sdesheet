#include <bits/stdc++.h> 
/*

    intervals[i][0] = start point of i'th interval
    intervals[i][1] = finish point of i'th interval

*/
struct interval{
    int start;
    int end;
};
bool compare(interval a,interval b)
{
    return a.start<b.start;
}
vector<vector<int>> mergeIntervals(vector<vector<int>> &intervals)
{
    vector<vector<int>> res;
    int n= intervals.size();
    vector<interval> arr(n);
    for(int i=0;i<n;i++)
    {
        arr[i].start = intervals[i][0];
        arr[i].end = intervals[i][1];
    }
    sort(arr.begin(), arr.end(), compare);
    stack<interval> s;
    s.push(arr[0]);
    for(int i=1;i<n;i++)
    {
        interval time = s.top();
        int st = time.start;
        int et = time.end;
        if(arr[i].end <= et)
        {
            continue;
        }
        else if(arr[i].start <=et)
        {
            s.pop();
            time.end = arr[i].end;
            s.push(time);
        }
        else
            s.push(arr[i]);
    }
    while(!s.empty())
    {
        vector<int> ans;
        interval time = s.top();
        s.pop();
        int st = time.start;
        int et = time.end;
        ans.push_back(st);
        ans.push_back(et);
        res.push_back(ans);
    }
    reverse(res.begin(), res.end());
    return res;
}
