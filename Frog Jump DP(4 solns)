RECURSION

#include<bits/stdc++.h>
int minimumEnergy(int i, vector<int> &arr, int n)
{
    if(i==0)
        return 0;
    int left = minimumEnergy(i-1, arr, n)+abs(arr[i]-arr[i-1]);
    int right = INT_MAX;
    if(i>1)
        right = minimumEnergy(i-2, arr, n)+ abs(arr[i]-arr[i-2]);
    return min(left,right);
}

int frogJump(int n, vector<int> &arr)
{
    int i=n-1;
    return minimumEnergy(i, arr, n);
}

===========================================================================

MEMOIZATION

#include<bits/stdc++.h>
int minimumEnergy(int i, vector<int> &arr, int n, vector<int> &dp)
{
    if(i==0)
        return dp[i]=0;
    if(dp[i]!=-1)
        return dp[i];
    int left = minimumEnergy(i-1, arr, n ,dp)+abs(arr[i]-arr[i-1]);
    int right = INT_MAX;
    if(i>1)
        right = minimumEnergy(i-2, arr, n, dp)+ abs(arr[i]-arr[i-2]);
    return dp[i]=min(left,right);
}

int frogJump(int n, vector<int> &arr)
{
    int i=n-1;
    vector<int> dp(n, -1);
    minimumEnergy(i, arr, n, dp);
    return dp[n-1];
}


============================================================================


TABULATION

#include<bits/stdc++.h>

int frogJump(int n, vector<int> &arr)
{
    
    vector<int> dp(n, 0);
    dp[0] = 0;
    for(int i=1;i<n;i++)
    {
        int left = dp[i-1]+abs(arr[i]-arr[i-1]);
        int right = INT_MAX;
        if(i>1)
            right = dp[i-2]+abs(arr[i]-arr[i-2]);
        dp[i] = min(left,right);
    }
    return dp[n-1];
}



===========================================================================

SPACE OPTIMIZATION


#include<bits/stdc++.h>

int frogJump(int n, vector<int> &arr)
{
    
    int prev = 0;
    int prev2=0;
    int curi = 0;
    for(int i=1;i<n;i++)
    {
        int left = prev+abs(arr[i]-arr[i-1]);
        int right = INT_MAX;
        if(i>1)
            right = prev2+abs(arr[i]-arr[i-2]);
        curi= min(left,right);
        prev2=prev;
        prev=curi;
    }
    return prev;
}
