RECURSION

#include<bits/stdc++.h>
int checkMin(int i, vector<int> &arr, int k)
{
    if(i==0)
        return 0;
    int energy = INT_MAX;
    for(int j=1;j<=k;j++)
    {
       
        if(i-j>=0)
        {
            int left = checkMin(i-j, arr, k )+abs(arr[i]-arr[i-j]);
    
    energy= min(left, energy);
        }
        
    }
    return energy;
    
}
int frogJump(int n, vector<int> &heights)
{
   int k=2;
    int i=n-1;
    return checkMin(i, heights, k);
    
}

===========================================================================

MEMOIZATION

#include<bits/stdc++.h>
int checkMin(int i, vector<int> &arr, int k, vector<int> &dp)
{
    if(i==0)
        return dp[i]=0;
    int energy = INT_MAX;
    if(dp[i]!=-1)
        return dp[i];
    for(int j=1;j<=k;j++)
    {
       
        if(i-j>=0)
        {
            int left = checkMin(i-j, arr, k ,dp)+abs(arr[i]-arr[i-j]);
    
    energy= min(left, energy);
        }
        
    }
    return dp[i]=energy;
    
}
int frogJump(int n, vector<int> &heights)
{
   int k=2;
    int i=n-1;
    vector<int> dp(n, -1);
    return checkMin(i, heights, k, dp);
    
}

==========================================================================

Tabulation 

#include<bits/stdc++.h>

int frogJump(int n, vector<int> &arr)
{
   int k=2;
    vector<int> dp(n, 0);
    dp[0]=0;
    for(int i=1;i<n;i++)
    {
        int energy = INT_MAX;
        for(int j=1;j<=k;j++)
        {
       
            if(i-j>=0)
            {
                int left = dp[i-j]+abs(arr[i]-arr[i-j]);
    
                energy= min(left, energy);
            }
        dp[i]=energy;
        }
    }
    return dp[n-1];
    
    
}

======================================================================
