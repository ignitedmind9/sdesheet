recursion 

class Solution {
public:
    int maxSum(int i, vector<int> &nums)
    {
        if(i==0)
            return nums[i];
        if(i<0)
            return 0;
            
        int pick = nums[i]+maxSum(i-2, nums);
        int notPick = 0 + maxSum(i-1, nums);
        
        return max(pick, notPick);
    }
    int rob(vector<int>& nums) 
    {
        int n= nums.size();
        int i = n-1;
        return maxSum(i, nums);
        
    }
};
=============================
memoization

class Solution {
public:
    int maxSum(int i, vector<int> &nums, vector<int> &dp)
    {
        if(i==0)
            return dp[i]=nums[i];
        if(i<0)
            return 0;
            
        if(dp[i]!=-1)
            return dp[i];
        int pick = nums[i]+maxSum(i-2, nums, dp);
        int notPick = 0 + maxSum(i-1, nums, dp);
        
        return dp[i]=max(pick, notPick);
    }
    int rob(vector<int>& nums) 
    {
        int n= nums.size();
        
        vector<int> dp(n, -1);
        int i=n-1;
         maxSum(i, nums, dp);
        return dp[n-1];
    }
};

================================

tabulation 

class Solution {
public:
    
    int rob(vector<int>& nums) 
    {
        int n= nums.size();
        
        vector<int> dp(n, 0);
        dp[0] = nums[0];
        for(int i=1;i<n;i++)
        {
            int pick = nums[i];
            if(i>1)
                pick+=dp[i-2];
            int notPick = 0 + dp[i-1];
            
            dp[i] = max(pick, notPick);
        }
        return dp[n-1];
    }
};

=================================

space optimization

class Solution {
public:
    
    int rob(vector<int>& nums) 
    {
        int n= nums.size();
        
        vector<int> dp(n, 0);
        int prev = nums[0];
        int prev2 =0;
        for(int i=1;i<n;i++)
        {
            int pick = nums[i];
            if(i>1)
                pick+=prev2;
            int notPick = 0 + prev;
            
            int curi = max(pick, notPick);
            prev2=prev;
            prev=curi;
        }
        return prev;
    }
};
